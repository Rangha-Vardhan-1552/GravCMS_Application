{% block footer %}
<style>
    /* Import Google font - Poppins */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}
body {
  background: #E3F2FD;
}
.chatbot-toggler {
  position: fixed;
  bottom: 30px;
  right: 35px;
  outline: none;
  border: none;
  height: 50px;
  width: 50px;
  display: flex;
  cursor: pointer;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  background: #724ae8;
  transition: all 0.2s ease;
}
body.show-chatbot .chatbot-toggler {
  transform: rotate(90deg);
}
.chatbot-toggler span {
  color: #fff;
  position: absolute;
}
.chatbot-toggler span:last-child,
body.show-chatbot .chatbot-toggler span:first-child  {
  opacity: 0;
}
body.show-chatbot .chatbot-toggler span:last-child {
  opacity: 1;
}
.chatbot {
  position: fixed;
  right: 35px;
  bottom: 90px;
  width: 420px;
  background: #fff;
  border-radius: 15px;
  overflow: hidden;
  opacity: 0;
  pointer-events: none;
  transform: scale(0.5);
  transform-origin: bottom right;
  box-shadow: 0 0 128px 0 rgba(0,0,0,0.1),
              0 32px 64px -48px rgba(0,0,0,0.5);
  transition: all 0.1s ease;
}
body.show-chatbot .chatbot {
  opacity: 1;
  pointer-events: auto;
  transform: scale(1);
}
.chatbot header {
  padding: 16px 0;
  position: relative;
  text-align: center;
  color: #fff;
  background: #724ae8;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
.chatbot header span {
  position: absolute;
  right: 15px;
  top: 50%;
  display: none;
  cursor: pointer;
  transform: translateY(-50%);
}
header h2 {
  font-size: 1.4rem;
}
.chatbot .chatbox {
  overflow-y: auto;
  height: 510px;
  padding: 30px 20px 100px;
}
.chatbot :where(.chatbox, textarea)::-webkit-scrollbar {
  width: 6px;
}
.chatbot :where(.chatbox, textarea)::-webkit-scrollbar-track {
  background: #fff;
  border-radius: 25px;
}
.chatbot :where(.chatbox, textarea)::-webkit-scrollbar-thumb {
  background: #ccc;
  border-radius: 25px;
}
.chatbox .chat {
  display: flex;
  list-style: none;
}
.chatbox .outgoing {
  margin: 20px 0;
  justify-content: flex-end;
}
.chatbox .incoming span {
  width: 32px;
  height: 32px;
  color: #fff;
  cursor: default;
  text-align: center;
  line-height: 32px;
  align-self: flex-end;
  background: #724ae8;
  border-radius: 4px;
  margin: 0 10px 7px 0;
}
.chatbox .chat p {
  white-space: pre-wrap;
  padding: 12px 16px;
  border-radius: 10px 10px 0 10px;
  max-width: 75%;
  color: #fff;
  font-size: 0.95rem;
  background: #724ae8;
}
.chatbox .incoming p {
  border-radius: 10px 10px 10px 0;
}
.chatbox .chat p.error {
  color: #721c24;
  background: #f8d7da;
}
.chatbox .incoming p {
  color: #000;
  background: #f2f2f2;
}
.chatbot .chat-input {
  display: flex;
  gap: 5px;
  position: absolute;
  bottom: 0;
  width: 100%;
  background: #fff;
  padding: 3px 20px;
  border-top: 1px solid #ddd;
}
.chat-input textarea {
  height: 55px;
  width: 100%;
  border: none;
  outline: none;
  resize: none;
  max-height: 180px;
  padding: 15px 15px 15px 0;
  font-size: 0.95rem;
}
.chat-input span {
  align-self: flex-end;
  color: #724ae8;
  cursor: pointer;
  height: 55px;
  display: flex;
  align-items: center;
  visibility: hidden;
  font-size: 1.35rem;
}
.chat-input textarea:valid ~ span {
  visibility: visible;
}

@media (max-width: 490px) {
  .chatbot-toggler {
    right: 20px;
    bottom: 20px;
  }
  .chatbot {
    right: 0;
    bottom: 0;
    height: 100%;
    border-radius: 0;
    width: 100%;
  }
  .chatbot .chatbox {
    height: 90%;
    padding: 25px 15px 100px;
  }
  .chatbot .chat-input {
    padding: 5px 15px;
  }
  .chatbot header span {
    display: block;
  }
}
</style>

<!-- {% block stylesheets %}
    {% do assets.addCss('theme://css/sample.css') %}
    {{ assets.css() }}
{% endblock %} -->
<!DOCTYPE html>
<!-- Coding By CodingNepal - www.codingnepalweb.com -->
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Purview Services</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />
  </head>
  <body>
    <button class="chatbot-toggler">
      <span class="material-symbols-rounded">mode_comment</span>
      <span class="material-symbols-outlined">close</span>
    </button>
    <div class="chatbot">
      <header>
        <h2>Chatbot</h2>
        <span class="close-btn material-symbols-outlined">close</span>
      </header>
      <ul class="chatbox">
        <li class="chat incoming">
          <span class="material-symbols-outlined">smart_toy</span>
          <p>Hi there ðŸ‘‹<br>How can I help you today?</p>
        </li>
      </ul>
      <div class="chat-input">
        <textarea placeholder="Enter a message..." spellcheck="false" required></textarea>
        <span id="send-btn" class="material-symbols-rounded">send</span>
      </div>
    </div>

  </body>
</html>
<script src="{{ url('theme://js/chatbot.js') }}">
//     var chatbotToggler = document.querySelector(".chatbot-toggler");
// var closeBtn = document.querySelector(".close-btn");
// var chatbox = document.querySelector(".chatbox");
// var chatInput = document.querySelector(".chat-input textarea");
// var sendChatBtn = document.querySelector(".chat-input span");
// var userMessage = null; // Variable to store user's message
// var API_KEY = ""; // Paste your API key here
// var inputInitHeight = chatInput ? chatInput.scrollHeight : 0;
// var createChatLi = function (message, className) {
//     // Create a chat <li> element with passed message and className
//     var chatLi = document.createElement("li");
//     chatLi.classList.add("chat", "".concat(className));
//     var chatContent = className === "outgoing" ? "<p></p>" : "<span class=\"material-symbols-outlined\">smart_toy</span><p></p>";
//     chatLi.innerHTML = chatContent;
//     chatLi.querySelector("p").textContent = message;
//     return chatLi; // return chat <li> element
// };
// var generateResponse = function (chatElement) {
//     var API_URL = "https://api.openai.com/v1/chat/completions";
//     var messageElement = chatElement.querySelector("p");
//     // Define the properties and message for the API request
//     var requestOptions = {
//         method: "POST",
//         headers: {
//             "Content-Type": "application/json",
//             "Authorization": "Bearer ".concat(API_KEY)
//         },
//         body: JSON.stringify({
//             model: "gpt-3.5-turbo",
//             messages: [{ role: "user", content: userMessage }],
//         })
//     };
//     // Display "Thinking..." message while waiting for the response
//     if (messageElement)
//         messageElement.textContent = "Thinking...";
//     // Send POST request to API and handle streaming response
//     fetch(API_URL, requestOptions)
//         .then(function (response) { return response.json(); })
//         .then(function (data) {
//         var content = data.choices[0].message.content.trim(); // Extract content from response
//         // Split the content into words
//         var words = content.split(' ');
//         var index = 0;
//         if (messageElement)
//             messageElement.textContent = "";
//         // Function to display words word-by-word with a delay
//         var typingInterval = window.setInterval(function () {
//             if (index < words.length) {
//                 // Append the next word to the partial message
//                 if (messageElement)
//                     messageElement.textContent += (index === 0 ? '' : ' ') + words[index];
//                 index++;
//             }
//             else {
//                 // Stop the interval when all words are displayed
//                 clearInterval(typingInterval);
//                 // Scroll to bottom after adding all words
//                 if (chatbox)
//                     chatbox.scrollTo(0, chatbox.scrollHeight);
//             }
//         }, 200); // Adjust typing speed as needed
//     })
//         .catch(function () {
//         if (messageElement) {
//             messageElement.classList.add("error");
//             messageElement.textContent = "Oops! Something went wrong. Please try again.";
//         }
//     });
// };
// var handleChat = function () {
//     userMessage = chatInput ? chatInput.value.trim() : null; // Get user entered message and remove extra whitespace
//     if (!userMessage)
//         return;
//     // Clear the input textarea and set its height to default
//     if (chatInput) {
//         chatInput.value = "";
//         chatInput.style.height = "".concat(inputInitHeight, "px");
//     }
//     // Append the user's message to the chatbox
//     if (chatbox) {
//         chatbox.appendChild(createChatLi(userMessage, "outgoing"));
//         chatbox.scrollTo(0, chatbox.scrollHeight);
//     }
//     setTimeout(function () {
//         // Display "Thinking..." message while waiting for the response
//         var incomingChatLi = createChatLi("Thinking...", "incoming");
//         if (chatbox) {
//             chatbox.appendChild(incomingChatLi);
//             chatbox.scrollTo(0, chatbox.scrollHeight);
//         }
//         generateResponse(incomingChatLi);
//     }, 600);
// };
// chatInput === null || chatInput === void 0 ? void 0 : chatInput.addEventListener("input", function () {
//     // Adjust the height of the input textarea based on its content
//     if (chatInput) {
//         chatInput.style.height = "".concat(inputInitHeight, "px");
//         chatInput.style.height = "".concat(chatInput.scrollHeight, "px");
//     }
// });
// chatInput === null || chatInput === void 0 ? void 0 : chatInput.addEventListener("keydown", function (e) {
//     // If Enter key is pressed without Shift key and the window 
//     // width is greater than 800px, handle the chat
//     if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
//         e.preventDefault();
//         handleChat();
//     }
// });
// sendChatBtn === null || sendChatBtn === void 0 ? void 0 : sendChatBtn.addEventListener("click", handleChat);
// closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", function () { return document.body.classList.remove("show-chatbot"); });
// chatbotToggler === null || chatbotToggler === void 0 ? void 0 : chatbotToggler.addEventListener("click", function () { return document.body.classList.toggle("show-chatbot"); });

{% endblock %}